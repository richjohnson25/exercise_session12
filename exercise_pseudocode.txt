1. Given an array nums of size n, return the majority element. The majority element is the element that 
appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.
 ● Example 1:
 ○ Input: nums = [3,2,3]
 ○ Output: 3
 ● Example 2:
 ○ Input: nums = [2,2,1,1,1,2,2]
 ○ Output: 2
====================================
Pseudocode:
1. Declare function with parameter
FUNCTION Majority Element
    PASS IN: array of integer (nums)
2. Define the formula to find half the length of nums array
    let half = nums.length / 2
3. Declare for loop
    FOR (let i = 0; i < nums.length; i++)
4. Define the majority element
        let majority = 0
5. Declare inner for loop
        FOR (let j = 0; j < nums.length; j++)
6. Define condition to check whether nums[i] is equal to nums[j]
If nums[i] is equal to nums[j], increase the majority number by 1
            IF (nums[i] == nums[j])
                majority++
            END IF    
7. Set end of inner for loop and define condition to return the majority element
If majority is greater than half, return the element of nums with most occurrences
        END FOR
        IF (majority > half)
            PASS OUT: nums[i]
        END IF
8. Set end of loop and return -1 by default if there is no majority element
    END FOR
    PASS OUT: -1
END FUNCTION

2. Create a function to convert roman numeral to integer.
 ● Example 1:
 ○ Input: s = "III”
 ○ Output: 3
 ○ Explanation: III = 3.
 ● Example 2:
 ○ Input: s = "LVIII"
 ○ Output: 58
 ○ Explanation: L = 50, V= 5, III = 3.
 ● Example 3:
 ○ Input: s = "MCMXCIV"
 ○ Output: 1994
 ○ Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
=============================================================
Pseudocode:
1. Declare function with parameter
FUNCTION Roman To Int
    PASS IN: string (roman)
2. Define the list of roman numerals
    const romanNumerals = {
        I:1,
        V:5,
        X:10,
        L:50,
        C:100,
        D:500,
        M:1000
    }
3. Define the result from roman numerals
    let result = 0
4. Declare for loop
    FOR (let i = 0; i < roman.length; i++)
5. Define the current and next roman symbols
        let currentSymbol = romanNumerals[roman[i]]
        let nextSymbol = romanNumerals[roman[i+1]]
6. Define the conditional whether the value of current symbol is smaller than that of next symbol
        IF (nextSymbol && currentSymbol < nextSymbol)
            result =- currentSymbol
        ELSE IF
            result =+ currentSymbol
        END IF
7. Set end of for loop and return the result
    END FOR
    PASS OUT: result
END FUNCTION

3. Given an integer numRows, return the first numRows of Pascal's triangle.
 ● In Pascal's triangle, each number is the sum of the two 
numbers directly above it as shown →
 ● Example 1:
 ○ Input: numRows = 5
 ○ Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
 ● Example 2:
 ○ Input: numRows = 1
 ○ Output: [[1]]
========================================================
Pseudocode:
Main Function:
1. Declare function with parameter
FUNCTION Pascal Triangle
    PASS IN: integer (numRows)
2. Define the triangle in the form of array
    let triangle = []
3. Declare for loop
    FOR (let i = 0; i < numRows; i++)
4. Define the triangleRow array to store the elements
        let triangleRow = []
5. Define inner for loop
        FOR (let j = 0; j < i; j++)
6. Define condition to insert the rowElement to the triangleRow array
            IF (j == 0 || i == j)
                triangleRow.push(1)
            ELSE
                let rowElement = triangle[i-1][j-1] + triangle[i-1][j]
                triangleRow.push(rowElement)
            END IF
7. Set end of inner for loop and push the triangleRow into the triangle array
        END FOR
        triangle.push(triangleRow)
8. Set end of for loop and return the triangle array
    END FOR
    PASS OUT: triangle
END FUNCTION

Binomial Function:
1. Declare function with parameter
FUNCTION Binomial
    PASS IN: integer (num, key)
END FUNCTION

4. You are given an array prices where prices[i] is the price of a given stock on the ith day.
 ● You want to maximize your profit by choosing a single day to buy one stock and choosing a different 
day in the future to sell that stock.
 ● Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, 
return 0. 
● Example 1:
 ○ Input: prices = [7,1,5,3,6,4]
 ○ Output: 5
 ○ Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
 ○ Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you 
sell.
 ● Example 2:
 ○ Input: prices = [7,6,4,3,1]
 ○ Output: 0
 ○ Explanation: In this case, no transactions are done and the max profit = 0.
===================================================================================
Pseudocode:
1. Declare function with parameter
FUNCTION Stock Exchange
    PASS IN: integer of array (prices)
2. Define the maxProfit
    let maxProfit = 0
3. Define the loops
    FOR (let i = 0; i < prices.length; i++)
        FOR (let j = i+1; j < prices.length; j++)
4. Define the conditional statement to determine maxProfit from prices[j] - prices[i]
        IF (prices[j] - prices[i] > maxProfit)
            maxProfit = prices[j] - prices[i]
        END IF
5. Set end of for loops and return maxProfit
        END FOR
    END FOR
    PASS OUT: maxProfit
END FUNCTION